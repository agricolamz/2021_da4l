[["index.html", "Анализ данных для лингвистов 1 О курсе 1.1 Домашние задания 1.2 Используемые пакеты", " Анализ данных для лингвистов Г. А. Мороз 1 О курсе Материалы для курса Анализа данных для лингвистов, Школа лингвистики НИУ ВШЭ. запись лекции 2021.01.13 запись лекции 2021.01.15 запись лекции 2021.01.20 запись лекции 2021.01.22 запись лекции 2021.01.27 запись лекции 2021.01.29 запись лекции 2021.02.03 запись лекции 2021.02.05 запись лекции 2021.02.10 запись лекции 2021.02.12 запись лекции 2021.02.19 запись лекции 2021.02.24 запись лекции 2021.02.26 запись лекции 2021.03.03 запись лекции 2021.03.05 запись лекции 2021.03.05 запись лекции 2021.03.12 запись лекции 2021.03.19 1.1 Домашние задания домашнее задание к лекции 29.01.2021: вспомните пожалуйста, условные вероятности, формулу Байеса и при каких условиях ее применяют; посмотрите освежающие материалы про условную вероятность и формулу Байеса. домашнее задание 1. (дедлайны: 2021.02.10, 2021.02.13) домашнее задание 2. (дедлайны: 2021.03.05, 2021.03.08) домашнее задание 3. (дедлайны: 2021.03.26, 2021.03.28) 1.2 Используемые пакеты packageVersion(&quot;tidyverse&quot;) ## [1] &#39;1.3.0&#39; packageVersion(&quot;fitdistrplus&quot;) ## [1] &#39;1.1.3&#39; packageVersion(&quot;mixtools&quot;) ## [1] &#39;1.2.0&#39; packageVersion(&quot;lme4&quot;) ## [1] &#39;1.1.26&#39; packageVersion(&quot;lmerTest&quot;) ## [1] &#39;3.1.3&#39; packageVersion(&quot;car&quot;) ## [1] &#39;3.0.10&#39; packageVersion(&quot;pscl&quot;) ## [1] &#39;1.5.5&#39; packageVersion(&quot;nnet&quot;) ## [1] &#39;7.3.15&#39; packageVersion(&quot;MASS&quot;) ## [1] &#39;7.3.53.1&#39; "],["распределения.html", "2 Распределения 2.1 Распределения в R 2.2 Дискретные переменные 2.3 Числовые переменные", " 2 Распределения library(tidyverse) 2.1 Распределения в R В R встроено какое-то количество известных распределений. Все они представлены четырьмя функциями: d... (функция плотности, probability density function), p... (функция распределения, cumulative distribution function) — интеграл площади под кривой от начала до указанной квантили q... (обратная функции распределения, inverse cumulative distribution function) — значение p-той квантили распределения и r... (рандомные числа из заданного распределения). Рассмотрим все это на примере нормального распределения. tibble(x = 1:100, PDF = dnorm(x = x, mean = 50, sd = 10)) %&gt;% ggplot(aes(x, PDF))+ geom_point()+ geom_line()+ labs(title = &quot;PDF нормального распределения (μ = 50, sd = 10)&quot;) tibble(x = 1:100, CDF = pnorm(x, mean = 50, sd = 10)) %&gt;% ggplot(aes(x, CDF))+ geom_point()+ geom_line()+ labs(title = &quot;CDF нормального распределения (μ = 50, sd = 10)&quot;) tibble(quantiles = seq(0, 1, by = 0.01), value = qnorm(quantiles, mean = 50, sd = 10)) %&gt;% ggplot(aes(quantiles, value))+ geom_point()+ geom_line()+ labs(title = &quot;inverse CDF нормального распределения (μ = 50, sd = 10)&quot;) tibble(sample = rnorm(100, mean = 50, sd = 10)) %&gt;% ggplot(aes(sample))+ geom_histogram()+ labs(title = &quot;выборка нормально распределенных чисел (μ = 50, sd = 10)&quot;) Если не использовать set.seed(), то результат работы рандомизатора нельзя будет повторить. Какое значение имеет 25% квантиль нормального распределения со средним в 20 и стандартным отклонением 90? Ответ округлите до трех знаков после запятой. Данные из базы данных фонетических инвентарей PHOIBLE (Moran, McCloy, and Wright 2014), достаточно сильно упрощая, можно описать нормальным распределением со средним 35 фонем и стандартным отклонением 13. Если мы ничего не знаем про язык, оцените с какой вероятностью, согласно этой модели произвольно взятый язык окажется в промежутке между 25 и 50 фонемами? Ответ округлите до трех знаков после запятой. Какие есть недостатки у модели из предыдущего задания? ответы: 2.2 Дискретные переменные 2.2.1 Биномиальное распределение Биномиальное распределение — распределение количетсва успехов эксперементов Бернулли из n попыток с вероятностью успеха p. \\[P(k | n, p) = \\frac{n!}{k!(n-k)!} \\times p^k \\times (1-p)^{n-k} = {n \\choose k} \\times p^k \\times (1-p)^{n-k}\\] \\[ 0 \\leq p \\leq 1; n, k &gt; 0\\] tibble(x = 0:50, density = dbinom(x = x, size = 50, prob = 0.16)) %&gt;% ggplot(aes(x, density))+ geom_point()+ geom_line()+ labs(title = &quot;Биномиальное распределение p = 0.16, n = 50&quot;) Немного упрощая данные из статьи (Rosenbach 2003: 394), можно сказать что носители британского английского предпочитают s-генитив (90%) of-генитиву (10%). Какова вероятность, согласно этим данным, что в интервью британского актера из 118 контекстов будет 102 s-генитивов? Ответ округлите до трёх или менее знаков после запятой. А какое значение количества s-генитивов наиболее ожидаемо, согласно этой модели? 2.2.2 Геометрическое распределение Геометрическое распределение — распределение количетсва эксперементов Бернулли с вероятностью успеха p до первого успеха. \\[P(k | p) = (1-p)^k\\times p\\] \\[k\\in\\{1, 2, \\dots\\}\\] tibble(x = 0:50, density = dgeom(x = x, prob = 0.16)) %&gt;% ggplot(aes(x, density))+ geom_point()+ geom_line()+ labs(title = &quot;Геометрическое распределение p = 0.16, n = 50&quot;) Приняв модель из (Rosenbach 2003: 394), какова вероятность, что в интервью с британским актером первый of-генитив будет третьим по счету? 2.2.3 Распределение Пуассона Распределение дискретной переменной, обозначающей количество случаев \\(k\\) некоторого события, которое происходит с некоторой заданной частотой \\(\\lambda\\). \\[P(\\lambda) = \\frac{e^{-\\lambda}\\times\\lambda^k}{k!}\\] tibble(k = 0:50, density = dpois(x = k, lambda = 5)) %&gt;% ggplot(aes(k, density))+ geom_point()+ geom_line()+ labs(title = &quot;Распределение Пуассона с параметром λ = 5&quot;) Параметр \\(\\lambda\\) в модели Пуассона одновременно является и средним, и дисперсией. Попробуем воспользоваться распределением Пуассона для моделирования количества слогов в андийском языке. Количество слогов – это всегда натуральное число (т. е. не бывает 2.5 слогов, не бывает -3 слогов и т. д., но в теории может быть 0 слогов), так что модель Пуассона здесь применима. Согласно модели Пуассона все слова независимо друг от друга получают сколько-то слогов согласно распределению Пуассона. Посмотрим на данные: andic_syllables &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/andic_syllables.csv&quot;) andic_syllables %&gt;% ggplot(aes(n_syllables, count))+ geom_col()+ facet_wrap(~language, scales = &quot;free&quot;) Птичка напела (мы научимся узнавать, откуда птичка это знает на следующем занятии), что андийские данные можно описать при помощи распределения Пуассона с параметром \\(\\lambda\\) = 2.783. andic_syllables %&gt;% filter(language == &quot;Andi&quot;) %&gt;% rename(observed = count) %&gt;% mutate(predicted = dpois(n_syllables, lambda = 2.783)*sum(observed)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;value&quot;, cols = c(observed, predicted)) %&gt;% ggplot(aes(n_syllables, value, fill = type))+ geom_col(position = &quot;dodge&quot;) На графиках ниже представлены предсказания трех Пуассоновских моделей, какая кажется лучше? Выше было написано: Согласно модели Пуассона все слова независимо друг от друга получают сколько-то слогов согласно распределению Пуассона. Какие проблемы есть у предположения о независимости друг от друга количества слогов разных слов в словаре? 2.3 Числовые переменные 2.3.1 Нормальное распределение \\[P(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\\times e^{-\\frac{\\left(x-\\mu\\right)^2}{2\\sigma^2}}\\] \\[\\mu \\in \\mathbb{R}; \\sigma^2 &gt; 0\\] tibble(x = 1:100, PDF = dnorm(x = x, mean = 50, sd = 10)) %&gt;% ggplot(aes(x, PDF))+ geom_point()+ geom_line()+ labs(title = &quot;PDF нормального распределения (μ = 50, sd = 10)&quot;) Птичка напела, что длительность гласных американского английского из (Hillenbrand et al. 1995) можно описать нормальным распределением с параметрами \\(\\mu =\\) 274.673 и \\(\\sigma =\\) 64.482. Посмотрим, как можно совместить данные и это распределение: vowels &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/phonTools_hillenbrand_1995.csv&quot;) vowels %&gt;% ggplot(aes(dur)) + geom_histogram(aes(y =..density..)) + # обратите внимание на аргумент ..density.. stat_function(fun = dnorm, args = list(mean = 274.673, sd = 64.482), color = &quot;red&quot;) 2.3.2 Логнормальное распределение \\[P(x) = \\frac{1}{\\sqrt{x\\sigma2\\pi}}\\times e^{-\\frac{\\left(\\ln(x)-\\mu\\right)^2}{2\\sigma^2}}\\] \\[\\mu \\in \\mathbb{R}; \\sigma^2 &gt; 0\\] tibble(x = 1:100, PDF = dlnorm(x = x, mean = 3, sd = 0.5)) %&gt;% ggplot(aes(x, PDF))+ geom_point()+ geom_line()+ labs(title = &quot;PDF логнормального распределения (μ = 3, σ = 0.5)&quot;) Какая из логнормальных моделей для длительности гласных американского английского из (Hillenbrand et al. 1995) лучше подходит к данным? Попробуйте самостоятельно построить данный график. 2.3.3 Что еще почитать про распределения? Люди придумали очень много разных распределений. Стоит, наверное, также понимать, что распределения не существуют отдельно в вакууме: многие из них математически связаны друг с другом. Про это можно посмотреть вот здесь или здесь. "],["метод-максимального-правдоподобия.html", "3 Метод максимального правдоподобия 3.1 Оценка вероятности 3.2 Функция правдоподобия 3.3 Пример с непрерывным распределением 3.4 Метод максимального правдоподобия (MLE) 3.5 Логорифм функции правдоподобия", " 3 Метод максимального правдоподобия 3.1 Оценка вероятности library(tidyverse) Когда у нас задано некоторое распределение, мы можем задавать к нему разные вопросы. Например, если мы верим что длительность гласных американского английского из (Hillenbrand et al. 1995) можно описать логнормальным распределением с параметрами \\(\\ln{\\mu} =\\) 5.587 и \\(\\ln{\\sigma} =\\) 0.242, то мы можем делать некотрые предсказания относительно интересующей нас переменной. ggplot() + stat_function(fun = dlnorm, args = list(mean = 5.587, sd = 0.242))+ scale_x_continuous(breaks = 0:6*100, limits = c(0, 650))+ labs(x = &quot;длительность гласного (мс)&quot;, y = &quot;значение функции плотности&quot;) Если принять на веру, что логнормальное распределение с параметрами \\(\\ln{\\mu} =\\) 5.587 и \\(\\ln{\\sigma}=\\) 0.242 описывает данные длительности гласных американского английского из (Hillenbrand et al. 1995), то какова вероятность наблюдать значения между 300 и 400 мс? То же самое можно записать, используя математическую нотацию: \\[P\\left(X \\in [300,\\, 400] | X \\sim \\ln{\\mathcal{N}}(\\ln{\\mu} = 5.587, \\ln{\\sigma}=0.242)\\right) = ??\\] Ответ округлите до трех и меньше знаков после запятой. Если принять на веру, что биномиальное распределение с параметрами \\(p =\\) 0.9 описывает, согласно (Rosenbach 2003: 394) употребление s-генитивов в британском английском, то какова вероятность наблюдать значения между 300 и 350 генитивов в интервью, содержащее 400 генитивных контекстов? То же самое можно записать, используя математическую нотацию: \\[P\\left(X \\in [300,\\, 350] | X \\sim Binom(n = 400, p = 0.9)\\right) = ??\\] Ответ округлите до трех и меньше знаков после запятой. 3.2 Функция правдоподобия Если при поиске вероятностей, мы предполагали, что данные нам неизвестны, а распределение и его параметры известны, то функция правдоподобия позволяет этот процесс перевернуть, запустив поиск параметров распределения, при изветсных данных и семье распределения: \\[L\\left(X \\sim Distr(...)|x\\right) = ...\\] Таким образом получается, что на основании функции плотности мы можем сравнивать, какой параметр лучше подходит к нашим данным. Для примера рассмотрим наш s-генетив: мы провели интервью и нам встретилось 85 s-генетивов из 100 случаев всех генетивов. Насколько хорошо подходит нам распределение с параметром p = 0.9? Ответ: dbinom(85, 100, 0.9) [1] 0.03268244 Представим теперь это как функцию от параметра p: tibble(p = seq(0, 1, by = 0.01)) %&gt;% ggplot(aes(p)) + stat_function(fun = function(p) dbinom(85, 100, p), geom = &quot;col&quot;)+ labs(x = &quot;параметр биномиального распределения p&quot;, y = &quot;значение функции правдоподобия\\n(одно наблюдение)&quot;) А что если мы располагаем двумя интервью одного актера? В первом на сто генитивов пришлось 85 s-генитивов, а во втором – 89. В таком случае, также как и с вероятностью наступления двух независимых событий, значения функции плотности перемножаются. dbinom(85, 100, 0.9)*dbinom(89, 100, 0.9) [1] 0.003917892 tibble(p = seq(0, 1, by = 0.01)) %&gt;% ggplot(aes(p)) + stat_function(fun = function(p) dbinom(85, 100, p)*dbinom(89, 100, p), geom = &quot;col&quot;)+ labs(x = &quot;параметр биномиального распределения p&quot;, y = &quot;значение функции правдоподобия\\n(два наблюдения)&quot;) В итоге: вероятность — P(data|distribution) правдоподобие — L(distribution|data) Интеграл распределения/сумма значений вероятностей равен/на 1. Интеграл распределения/сумма значений правдоподобия может быть не равен/на 1. 3.3 Пример с непрерывным распределением Мы уже обсуждали, что длительность гласных американского английского из (Hillenbrand et al. 1995) можно описать логнормальным распределением с параметрами \\(\\ln\\mu\\) и \\(\\ln\\sigma\\). Предположим, что \\(\\ln\\sigma = 0.342\\), построим функцию правдоподобия для \\(\\ln\\mu\\): vowels &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/phonTools_hillenbrand_1995.csv&quot;) tibble(ln_mu = seq(5, 6, by = 0.001)) %&gt;% ggplot(aes(ln_mu)) + stat_function(fun = function(ln_mu) dlnorm(vowels$dur[1], meanlog = ln_mu, sdlog = 0.242))+ labs(x = &quot;параметр логнормального распределения ln μ&quot;, y = &quot;значение функции правдоподобия\\n(одно наблюдение)&quot;) tibble(ln_mu = seq(5, 6, by = 0.001)) %&gt;% ggplot(aes(ln_mu)) + stat_function(fun = function(ln_mu) dlnorm(vowels$dur[1], meanlog = ln_mu, sdlog = 0.242)*dlnorm(vowels$dur[2], meanlog = ln_mu, sdlog = 0.242))+ labs(x = &quot;параметр логнормального распределения ln μ&quot;, y = &quot;значение функции правдоподобия\\n(два наблюдения)&quot;) tibble(ln_mu = seq(5, 6, by = 0.001)) %&gt;% ggplot(aes(ln_mu)) + stat_function(fun = function(ln_mu) dlnorm(vowels$dur[1], meanlog = ln_mu, sdlog = 0.242)*dlnorm(vowels$dur[2], meanlog = ln_mu, sdlog = 0.242)*dlnorm(vowels$dur[3], meanlog = ln_mu, sdlog = 0.242))+ labs(x = &quot;параметр логнормального распределения ln μ&quot;, y = &quot;значение функции правдоподобия\\n(три наблюдения)&quot;) Для простоты в начале я зафиксировал один из параметров логнормального распредления: лог стандартное отклонение. Конечно, это совсем необязательно делать: можно создать матрицу значений лог среднего и лог стандартного отклонения и получить для каждой ячейки матрицы значения функции правдоподобия. 3.4 Метод максимального правдоподобия (MLE) Функция правдоподобия позволяет подбирать параметры распределения. Оценка параметров распределения при помощи функции максимального правдоподобия получила название метод максимального правдоподобия. Его я и использовал ранее для того, чтобы получить значения распределений для заданий из первого занятия: данные длительности американских гласных из (Hillenbrand et al. 1995) и логнормальное распределение library(fitdistrplus) fitdist(vowels$dur, distr = &#39;lnorm&#39;, method = &#39;mle&#39;) Fitting of the distribution &#39; lnorm &#39; by maximum likelihood Parameters: estimate Std. Error meanlog 5.5870359 0.005935135 sdlog 0.2423978 0.004196453 количество андийских слогов в словах и распределение Пуассона andic_syllables &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/andic_syllables.csv&quot;) andic_syllables %&gt;% filter(language == &quot;Andi&quot;) %&gt;% uncount(count) %&gt;% pull(n_syllables) %&gt;% fitdist(distr = &#39;pois&#39;, method = &#39;mle&#39;) Fitting of the distribution &#39; pois &#39; by maximum likelihood Parameters: estimate Std. Error lambda 2.782715 0.02128182 Есть и другие методы оценки параметров. Метод максимального правдоподобия может быть чувствителен к размеру выборки. Отфильтруйте из данных с количеством слогов в андийских языках багвалинский и, используя метод максимального правдоподобия, оцените для них параметры модели Пуассона. В работе (Coretta 2016) собраны данные длительности исландских гласных. Отфильтруйте данные, оставив односложные слова (переменная syllables) после придыхательного (переменная aspiration), произнесенные носителем tt01 (переменная speaker) и постройте следующий график, моделируя длительность гласных (переменная vowel.dur) нормальным и логнормальным распределением. Как вам кажется, какое распределение лучше подходит к данным? Докажите ваше утверждение, сравнив значения правдоподобия. 3.5 Логорифм функции правдоподобия Так как в большинстве случаев нужно найти лишь максимум функции правдоподобия, а не саму функцию \\(\\ell(x|\\theta)\\), то для облегчения подсчетов используют логорифмическую функцию правдоподобия \\(\\ln\\ell(x|\\theta)\\): в результате, вместо произведения появляется сумма1: \\[\\text{argmax}_\\theta \\prod \\ell(\\theta|x) = \\text{argmax}_\\theta \\sum \\ln\\ell(\\theta|x) \\] Во всех предыдущих примерах мы смотрели на 1-3 примера данных, давайте попробуем использовать функцию правдоподобия для большего набора данных. Представим, что мы проводим некоторый эксперимент, и у некоторых участников все получается с первой попытки, а некоторым нужна еще одна попытка или даже две. Дополните код функциями правдоподобия и логорифмической функцией правдоподобия, чтобы получился график ниже. set.seed(42) v &lt;- sample(0:2, 10, replace = TRUE) sapply(seq(0.01, 0.99, 0.01), function(p){ ... }) -&gt; likelihood sapply(seq(0.01, 0.99, 0.01), function(p){ ... }) -&gt; loglikelihood tibble(p = seq(0.01, 0.99, 0.01), loglikelihood, likelihood) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;value&quot;, loglikelihood:likelihood) %&gt;% ggplot(aes(p, value))+ geom_line()+ geom_vline(xintercept = 0.33, linetype = 2)+ facet_wrap(~type, scales = &quot;free_y&quot;, nrow = 2)+ scale_x_continuous(breaks = c(0:5*0.25, 0.33)) Это просто свойство логарифмов: log(5*5) = log(5)+log(5)↩︎ "],["модели-смеси-распределений.html", "4 Модели смеси распределений 4.1 Cмеси распределений 4.2 Модели смеси распределений 4.3 Несколько замечаний", " 4 Модели смеси распределений 4.1 Cмеси распределений Не все переменные выглядят так же красиво, как распределения из учебников статистики. Для примера возьмем датасет, который содержит спамерские и обычные смс-сообщения, выложенный UCI Machine Learning на kaggle. Посчитаем количество символов в сообщениях: spam_sms &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/spam_sms.csv&quot;) glimpse(spam_sms) Rows: 5,572 Columns: 2 $ type &lt;chr&gt; &quot;ham&quot;, &quot;ham&quot;, &quot;spam&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;spam&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;spa… $ message &lt;chr&gt; &quot;Go until jurong point, crazy.. Available only in bugis n grea… spam_sms %&gt;% mutate(n_char = nchar(message)) -&gt; spam_sms glimpse(spam_sms) Rows: 5,572 Columns: 3 $ type &lt;chr&gt; &quot;ham&quot;, &quot;ham&quot;, &quot;spam&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;spam&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;spa… $ message &lt;chr&gt; &quot;Go until jurong point, crazy.. Available only in bugis n grea… $ n_char &lt;int&gt; 111, 29, 155, 49, 61, 147, 77, 160, 157, 154, 109, 136, 155, 1… spam_sms %&gt;% ggplot(aes(n_char))+ geom_histogram(fill = &quot;gray90&quot;)+ labs(caption = &quot;данные из kaggle.com/uciml/sms-spam-collection-dataset&quot;, x = &quot;количество символов&quot;, y = &quot;значение функции плотности&quot;) Мы видим два явных горба и, как можно догадаться, это связано с тем, что спамерские сообщения в среднем длиннее и сосредоточены вокруг ограничения смс в 160 символов: spam_sms %&gt;% ggplot(aes(n_char))+ geom_histogram(fill = &quot;gray70&quot;, aes(y = ..density..))+ geom_density(aes(fill = type), alpha = 0.3)+ labs(caption = &quot;данные из kaggle.com/uciml/sms-spam-collection-dataset&quot;, x = &quot;количество символов&quot;, y = &quot;значение функции плотности&quot;)+ geom_vline(xintercept = 160, linetype = 2, size = 0.3) 4.2 Модели смеси распределений Такого рода данные можно описать при помощи модели смеси разных распределений. Мы сейчас опишем нормальными распределениями, но, ясно, что семейство распределений можно было бы подобрать и получше. library(mixtools) set.seed(42) spam_length_est &lt;- normalmixEM(spam_sms$n_char) number of iterations= 73 summary(spam_length_est) summary of normalmixEM object: comp 1 comp 2 lambda 0.439334 0.560666 mu 37.858905 114.070490 sigma 13.398985 60.921536 loglik at estimate: -29421.36 Класс, получаемый в результате работы функции normalmixEM() имеет встроеный график: plot(spam_length_est, density = TRUE) Однако, если хочется больше контроля над получаемым разультатом, я бы предложил использовать ggplot(): new_dnorm &lt;- function(x, mu, sigma, lambda){ dnorm(x, mu, sigma)*lambda } spam_sms %&gt;% ggplot(aes(n_char))+ geom_histogram(aes(y = ..density..), fill = &quot;gray90&quot;)+ stat_function(fun = new_dnorm, args = c(mu = spam_length_est$mu[1], sigma = spam_length_est$sigma[1], lambda = spam_length_est$lambda[1]), color = &quot;#F8766D&quot;)+ stat_function(fun = new_dnorm, args = c(mu = spam_length_est$mu[2], sigma = spam_length_est$sigma[2], lambda = spam_length_est$lambda[2]), color = &quot;#00BFC4&quot;)+ labs(caption = &quot;данные из kaggle.com/uciml/sms-spam-collection-dataset&quot;, x = &quot;количество символов&quot;, y = &quot;значение функции плотности&quot;)+ geom_vline(xintercept = 160, linetype = 2, size = 0.3) Таким образом мы получили классификатор first &lt;- new_dnorm(seq(1, 750, by = 1), mu = spam_length_est$mu[1], sigma = spam_length_est$sigma[1], lambda = spam_length_est$lambda[1]) second &lt;- new_dnorm(seq(1, 750, by = 1), mu = spam_length_est$mu[2], sigma = spam_length_est$sigma[2], lambda = spam_length_est$lambda[2]) which(first &gt; second) [1] 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [26] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 [51] 56 57 58 59 60 61 62 Если в смс-сообщении больше 62 символов, то согласно нашей модели, вероятнее всего это спам. spam_sms %&gt;% mutate(model_predict = ifelse(n_char &gt; 63, &quot;predicted_spam&quot;, &quot;predicted_ham&quot;)) %&gt;% count(model_predict, type) %&gt;% pivot_wider(names_from = type, values_from = n) Результат не идеальный, но лучше чем помечать как спам каждое 13 сообщение (\\(747/(4825+747)\\)). В работе (Coretta 2016) собраны данные длительности исландских гласных. Отфильтруйте данные, оставив наблюдения гласного [a] (переменная vowel), произнесенные носителем tt01 (переменная speaker) и постройте следующие графики, моделируя длительность гласного (переменная vowel.dur) смесью трех нормальных распределений. Как вам кажется, насколько хорошо модель смеси справилась с заданием? number of iterations= 114 4.3 Несколько замечаний В наших примерах нам была доступна информация о классах (spam/ham, coronal/labial/velar), однако модель смесей распределений как раз имеет смысл применять, когда такой информации нет. В смеси распределений может быть любое количество распределений. Модели смеси распределений не ограничены только нормальным распределением, алгоритм можно использовать и для других распределений. Чаще всего в моделях смеси распределений используются распределения одного семейства, однако можно себе представить и комбинации посложнее. Модели смеси распределений (mixture models) не стоит путать со смешанными моделями (mixed effects models). "],["байесовский-статистический-вывод.html", "5 Байесовский статистический вывод 5.1 Нотация 5.2 Категориальный пример 5.3 Разница между фриквентиским и байесовским подходами 5.4 Биномиальные данные 5.5 Байесовский апдейт нормального распределения 5.6 Другие распределения 5.7 Вопросы к апостериорному распределению", " 5 Байесовский статистический вывод 5.1 Нотация В байесовском подходе статистический вывод описывается формулой Байеса \\[P(θ|Data) = \\frac{P(Data|θ)\\times P(θ)}{P(Data)}\\] \\(P(θ|Data)\\) — апостериорная вероятность (posterior) \\(P(Data|θ)\\) — функция правдоподобия (likelihood) \\(P(θ)\\) — априорная вероятность (prior) \\(P(Data)\\) — нормализующий делитель В литературе можно еще встретить такую запись: \\[P(θ|Data) \\propto P(Data|θ)\\times P(θ)\\] На прошлых занятиях мы говорили, что функция правдоподобия не обязана интегрироваться до 1, тогда почему, назвав часть формулы Байеса \\(P(Data|θ)\\) функцией правдоподобия, мы оставляем нотацию, будто это функция вероятностей? Потому что это условная вероятность, она не обязана интегрироваться до 1. 5.2 Категориальный пример Для примера я взял датасет, который содержит спамерские и обычные смс-сообщения, выложенный UCI Machine Learning на kaggle и при помощи пакета udpipe токенизировал и определил часть речи: sms_pos &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/spam_sms_pos.csv&quot;) glimpse(sms_pos) Rows: 34 Columns: 3 $ type &lt;chr&gt; &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;h… $ upos &lt;chr&gt; &quot;ADJ&quot;, &quot;ADP&quot;, &quot;ADV&quot;, &quot;AUX&quot;, &quot;CCONJ&quot;, &quot;DET&quot;, &quot;INTJ&quot;, &quot;NOUN&quot;, &quot;NUM&quot;… $ n &lt;dbl&gt; 4329, 5004, 5832, 5707, 1607, 3493, 1676, 12842, 1293, 2424, 1144… sms_pos %&gt;% group_by(type) %&gt;% mutate(ratio = n/sum(n), upos = fct_reorder(upos, n, mean, .desc = TRUE)) %&gt;% ggplot(aes(type, ratio))+ geom_col()+ geom_label(aes(label = round(ratio, 3)), position = position_stack(vjust = 0.5))+ facet_wrap(~upos, scales = &quot;free_y&quot;) Давайте полученные доли считать нашей моделью: сумма всех чисел внутри каждого типа (ham/spam) дает в сумме 1. Мы получили новое сообщение: Call FREEPHONE 0800 542 0825 now! Модель udpipe разобрала его следующим образом: VERB NUM NUM NUM NUM ADV PUNCT Понятно, что это – спам, но мы попытаемся применить байесовский статистический вывод, чтобы определить тип сообщения. Предположим, что машина считает обе гипотезы равновероятными, т. е. ее априорное распределение гипотез равно 0.5 каждая. На минуту представим, что машина анализирует текст пословно. Первое слово типа VERB. Функции правдоподобия равны 0.135 и 0.096 для сообщений типа ham и spam соответственно. Применим байесовский апдейт: tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior = 0.5, likelihood = c(0.135, 0.096), product = prior*likelihood, posterior = product/sum(product)) Вот мы и сделали байесовский апдейт. Теперь апостериорное распределение, которое мы получили на предыдущем шаге, мы можем использовать в новом апдейте. Следующее слово в сообщении типа NUM. tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior_2 = c(0.584, 0.416), likelihood_2 = c(0.016, 0.117), product_2 = prior_2*likelihood_2, posterior_2 = product_2/sum(product_2)) Уже на второй итерации, наша модель почти уверена, что это сообщение spam. На третьей итерации уверенность только растет: tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior_3 = c(0.161, 0.839), likelihood_3 = c(0.016, 0.117), product_3 = prior_3*likelihood_3, posterior_3 = product_3/sum(product_3)) Посчитайте вероятность гипотезы, что перед нами спамерское сообщение, если предположить, что каждое пятое сообщение – спам. Ответ округлите до трех знаков после запятой. Из формулы Байеса следует, что не обязательно каждый раз делить на нормализующий делитель, это можно сделать единожды. tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior = 0.5, likelihood = c(0.135, 0.096), likelihood_2 = c(0.016, 0.117), product = prior*likelihood*likelihood_2*likelihood_2, posterior = product/sum(product)) Из приведенных рассуждений также следует, что все равно в каком порядке мы производим байесовский апдейт: мы могли сначала умножить на значение правдоподобия для категории NUM и лишь в конце на значение правдоподобия VERB. Также стоит отметить, что если данных много, то через какое-то время становится все равно, какое у нас было априорное распределение. Даже в нашем примере, в котором мы проанализировали первые три слова сообщения, модель, прогнозирующая, что сообщение спамерское, выиграет, даже если, согласно априорному распределению, спамерским является каждое 20 сообщение: tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior = c(0.95, 0.05), likelihood = c(0.135, 0.096), likelihood_2 = c(0.016, 0.117), product = prior*likelihood*likelihood_2*likelihood_2, posterior = product/sum(product)) Самым главным отличием байесовского статистического вывода от фриквентистского, является то, что мы в результате получаем вероятность каждой из моделей. Это очень значительно отличается от фриквентистской практики нулевых гипотез и p-value, в соответствии с которыми мы можем лишь отвергнуть или не отвергнуть нулевую гипотезу. Вашего друга похитили а на почту отправили датасет, в котором записаны данные о погоде из пяти городов. Ваш телефон зазвонил, и друг сказал, что не знает куда его похитили, но за окном легкий дождь (Rain). А в какой-то из следующих дней — сильный дождь (Rain, Thunderstorm). Исходя из явно неверного предположения, что погодные условия каждый день не зависят друг от друга, сделайте байесовский апдейт и предположите, в какой город вероятнее всего похитили друга. Auckland Beijing Chicago Mumbai San Diego Укажите получившуюся вероятность. Выполняя задание, округлите все вероятности и значения правдоподобия до 3 знаков после запятой. 5.3 Разница между фриквентиским и байесовским подходами Картинка из одной из моих любимых книг по статистике (Efron and Hastie 2016: 34). 5.4 Биномиальные данные Биномиальные данные возникают, когда нас интересует доля успехов в какой-то серии эксперементов Бернулли. 5.4.1 Биномиальное распределение Биномиальное распределение — распределение количества успехов эксперементов Бернулли из n попыток с вероятностью успеха p. \\[P(k | n, p) = \\frac{n!}{k!(n-k)!} \\times p^k \\times (1-p)^{n-k} = {n \\choose k} \\times p^k \\times (1-p)^{n-k}\\] \\[ 0 \\leq p \\leq 1; n, k &gt; 0\\] tibble(x = 0:50, density = dbinom(x = x, size = 50, prob = 0.16)) %&gt;% ggplot(aes(x, density))+ geom_point()+ geom_line()+ labs(title = &quot;Биномиальное распределение p = 0.16, n = 50&quot;) 5.4.2 Бета распределение \\[P(x; α, β) = \\frac{x^{α-1}\\times (1-x)^{β-1}}{B(α, β)}; 0 \\leq x \\leq 1; α, β &gt; 0\\] Бета функция: \\[Β(α, β) = \\frac{Γ(α)\\times Γ(β)}{Γ(α+β)} = \\frac{(α-1)!(β-1)!}{(α+β-1)!} \\] tibble(x = seq(0, 1, length.out = 100), density = dbeta(x = x, shape1 = 8, shape2 = 42)) %&gt;% ggplot(aes(x, density))+ geom_point()+ geom_line()+ labs(title = &quot;Бета распределение α = 8, β = 42&quot;) Можно поиграть с разными параметрами: shiny::runGitHub(&quot;agricolamz/beta_distribution_shiny&quot;) \\[\\mu = \\frac{\\alpha}{\\alpha+\\beta}\\] \\[\\sigma^2 = \\frac{\\alpha\\times\\beta}{(\\alpha+\\beta)^2\\times(\\alpha+\\beta+1)}\\] 5.4.3 Байесовский апдейт биномиальных данных \\[Beta_{post}(\\alpha_{post}, \\beta_{post}) = Beta(\\alpha_{prior}+\\alpha_{data}, \\beta_{prior}+\\beta_{data}),\\] где \\(Beta\\) — это бета распределение shiny::runGitHub(&quot;agricolamz/bayes_for_binomial_app&quot;) Немного упрощая данные из статьи (Rosenbach 2003: 394), можно сказать что носители британского английского предпочитают s-генитив (90%) of-генитиву (10%). Проведите байесовский апдейт, если Вы наблюдаете в интервью британского актера из 120 контекстов 92 s-генитивов. Априорное распределение берите соразмерное данным. Ответ округлите до трёх или менее знаков после запятой. Параметр альфа: Параметр бета: 5.4.4 Байесовский апдейт биномиальных данных: несколько моделей tibble(x = rep(seq(0, 1, length.out = 100), 6), density = c(dbeta(unique(x), shape1 = 8, shape2 = 42), dbeta(unique(x), shape1 = 16, shape2 = 34), dbeta(unique(x), shape1 = 24, shape2 = 26), dbeta(unique(x), shape1 = 8+4, shape2 = 42+16), dbeta(unique(x), shape1 = 16+4, shape2 = 34+16), dbeta(unique(x), shape1 = 24+4, shape2 = 26+16)), type = rep(c(&quot;prior&quot;, &quot;prior&quot;, &quot;prior&quot;, &quot;posterior&quot;, &quot;posterior&quot;, &quot;posterior&quot;), each = 100), dataset = rep(c(&quot;prior: 8, 42&quot;, &quot;prior: 16, 34&quot;, &quot;prior: 24, 26&quot;, &quot;prior: 8, 42&quot;, &quot;prior: 16, 34&quot;, &quot;prior: 24, 26&quot;), each = 100)) %&gt;% ggplot(aes(x, density, color = type))+ geom_line()+ facet_wrap(~dataset)+ labs(title = &quot;data = 4, 16&quot;) 5.4.5 Что почитать? Если остались неясности, то можно посмотреть 2-ую главу (Robinson 2017). 5.5 Байесовский апдейт нормального распределения Встроенный датасет ChickWeight содержит вес цыплят (weight) в зависимости от типа диеты (Diet). Мы будем анализировать 20-дневных птенцов. ChickWeight %&gt;% filter(Time == 20) -&gt; chicks chicks %&gt;% ggplot(aes(weight))+ geom_density() Начнем с апостериорных параметров для наблюдений \\(x_1, ... x_n\\) со средним \\(\\mu_{data}\\) известной дисперсией \\(\\sigma_{known}^2\\) 5.5.1 Байесовский апдейт нормального распределения: выбор из нескольких моделей Мы можем рассматривать эту задачу как выбор между несколькими моделями с разными средними: tibble(x = rep(1:400, 6), density = c(dnorm(unique(x), mean = 125, sd = 70), dnorm(unique(x), mean = 150, sd = 70), dnorm(unique(x), mean = 175, sd = 70), dnorm(unique(x), mean = 200, sd = 70), dnorm(unique(x), mean = 225, sd = 70), dnorm(unique(x), mean = 250, sd = 70)), dataset = rep(1:6, each = 400)) %&gt;% ggplot(aes(x, density, color = factor(dataset)))+ geom_line() Дальше мы можем точно так же апдейтить, как мы делали раньше: tibble(mu = seq(125, 250, by = 25), prior = 1/6, likelihood = c(prod(dnorm(chicks$weight, mean = 125, sd = 70)), prod(dnorm(chicks$weight, mean = 150, sd = 70)), prod(dnorm(chicks$weight, mean = 175, sd = 70)), prod(dnorm(chicks$weight, mean = 200, sd = 70)), prod(dnorm(chicks$weight, mean = 225, sd = 70)), prod(dnorm(chicks$weight, mean = 250, sd = 70))), product = prior*likelihood, posterior = product/sum(product)) -&gt; results results results %&gt;% select(mu, prior, posterior) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;probability&quot;, prior:posterior) %&gt;% ggplot(aes(mu, probability, color = type))+ geom_point()+ labs(title = &quot;изменение вероятностей для каждой из моделей&quot;, x = &quot;μ&quot;) 5.5.2 Байесовский апдейт нормального распределения: непрерывный вариант Во первых, нам понадобится некоторая мера, которая называется точность (precision): \\[\\tau = \\frac{1}{\\sigma^2}\\] \\[\\tau_{post} = \\tau_{prior} + \\tau_{data} \\Rightarrow \\sigma^2_{post} = \\frac{1}{\\tau_{post}}\\] \\[\\mu_{post} = \\frac{\\mu_{prior} \\times \\tau_{prior} + \\mu_{data} \\times \\tau_{data}}{\\tau_{post}}\\] Так что если нашим априорным распределением мы назовем нормальное распределение со средним около 180 и стандартным отклонением 90, то процесс байесовского апдейта будет выглядеть вот так: sd_prior &lt;- 90 sd_data &lt;- sd(chicks$weight) sd_post &lt;- 1/sqrt(1/sd_prior^2 + 1/sd_data^2) mean_prior &lt;- 180 mean_data &lt;- mean(chicks$weight) mean_post &lt;- weighted.mean(c(mean_prior, mean_data), c(1/sd_prior^2, 1/sd_data^2)) chicks %&gt;% ggplot(aes(weight)) + geom_histogram(aes(y = ..density..))+ stat_function(fun = dnorm, args = list(mean_prior, sd_prior), color = &quot;lightblue&quot;)+ stat_function(fun = dnorm, args = list(mean_post, sd_post), color = &quot;red&quot;) shiny::runGitHub(&quot;agricolamz/bayes_for_normal_app&quot;) В работе (Coretta 2016) собраны данные длительности исландских гласных. Отфильтруйте данные, произнесенные носителем tt01 (переменная speaker), произведите байесовский апдейт данных, моделируя длительность гласных (переменная vowel.dur) нормальным распределением и постройте график. В качестве априорного распределения используйте нормальное распределение со средним 87 и стандартным отклонением 25. 5.5.3 Что почитать? Murphy K. P. (2007) Conjugate Bayesian analysis of the Gaussian distribution Jordan M. I. (2010) The Conjugate Prior for the Normal Distribution раздел 2.5 в Gelman A. et. al (2014) Bayesian Data Analysis 5.6 Другие распределения Мы обсудили биномиальные и нормальнораспределенные данные. Так случилось, что для них есть короткий путь сделать байесовский апдейт, не применяя формулы байеса. И нам так повезло, что связки априорного/апосториорного распределений и функции правдоподобия такие простые: априорного/апосториорного распределены как бета распределение, значит функция правдоподобия – биномиальное распределение если мы моделируем данные при помощи нормального распределения, то все три распределения (априорное, функция правдопдобия и апосториорное) – нормальные. Такие отношения между распределениями называют сопряженными (conjugate). В результате для разных семейств функции правдоподобия существует список соответствующих сопряженных априорных распределений (conjugate prior), который можно найти, например, здесь. В более случаях используется (а на самом деле почти всегда) Марковские цепи Монте-Карло (MCMC). 5.7 Вопросы к апостериорному распределению A frequentist uses impeccable logic to answer the wrong question, while a Bayesian answers the right question by making assumptions that nobody can fully believe in. (P. G. Hammer) попытка оценить параметр θ и/или какой-нибудь интервал, в котором он лежит. среднее апостериорного распределения (mean of the posterior estimation, MAP) максимум апостериорного распределения (maximum a posteriori estimation, MAP) байесовский доверительный интервал ответить на вопросы вроде какова вероятность, что значение θ больше некоторого значения \\(x\\)? какова вероятность, что значение θ лежит в интервале \\([x; y]\\)? и т. п. Выборки из апостериорного распределения (Posterior simulation): симулируйте большую выборку из апостериорного распределения; используйте полученную выборку для статистического вывода. Допустим, мы получили апостериорное бета распределение с параметрами 20 и 70. Какова вероятность наблюдать значения больше 0.3? posterior_simulation &lt;- rbeta(n = 10000, shape1 = 20, shape2 = 70) sum(posterior_simulation &gt; 0.3)/10000 [1] 0.0424 И это не p-value! Это настоящие вероятности! "],["байесовский-доверительный-интервал.html", "6 Байесовский доверительный интервал 6.1 Фреквентисткий доверительный интервал 6.2 Байесовский доверительный интервал", " 6 Байесовский доверительный интервал Рассмотрим простенькую задачу, которую мы видели раньше: Немного упрощая данные из статьи (Rosenbach 2003: 394), можно сказать что носители британского английского предпочитают s-генитив (90%) of-генитиву (10%). Проведите байесовский апдейт, если Вы наблюдаете в интервью британского актера из 120 контекстов 92 s-генитивов. Априорное распределение берите соразмерное данным. Ответ округлите до трёх или менее знаков после запятой. tibble(x = seq(0, 1, by = 0.001), y = dbeta(x, 108+92, 12+28)) %&gt;% ggplot(aes(x, y))+ geom_line() 6.1 Фреквентисткий доверительный интервал Фреквентистский доверительный интервал (по-английски confidence interval) основан на правиле трех сигм нормального распределения: z-score: 95% данных находится в 1.96 стандартных отклонений 99% данных находится в 2.58 стандартных отклонений Доверительный интервал: предположим, что данные генеральной совокупности нормально распределены тогда доверительные интервалы выборок взятых из генеральной совокупности будут покрывать среднее генеральной совокупности \\[\\bar{x} \\pm z \\times \\frac{\\sigma}{\\sqrt{n}}\\text{, где } z \\text{ — это центральная } 1 - \\frac{\\alpha}{2} \\text{ часть данных}\\] Распространение этой логики на биномиальные данные называется интервал Вальда: \\[\\bar{x} = \\theta; \\sigma = \\sqrt{\\frac{\\theta\\times(1-\\theta)}{n}}\\] Тогда интервал Вальда: \\[\\theta \\pm z\\times\\sqrt{\\frac{\\theta\\times(1-\\theta)} {n}}\\] Есть только одна проблема: работает он плохо. Его аналоги перечислены в других работ: assymptotic method with continuity correction Wilson score Wilson Score method with continuity correction Jeffreys interval Clopper–Pearson interval (default in R binom.test()) Agresti–Coull interval … см. пакет binom low_ci &lt;- binom.test(x = 108+92, n = 108+92+12+28)$conf.int[1] up_ci &lt;- binom.test(x = 108+92, n = 108+92+12+28)$conf.int[2] tibble(x = seq(0, 1, by = 0.001), y = dbeta(x, 108+92, 12+28)) %&gt;% ggplot(aes(x, y))+ geom_line()+ annotate(geom = &quot;errorbar&quot;, y = 0, xmin = low_ci, xmax = up_ci, color = &quot;red&quot;)+ labs(title = &quot;Апостериорное распределение&quot;, subtitle = &quot;красным фреквентисткий 95% доверительный интервал&quot;, x = &quot;&quot;, y = &quot;&quot;) В базовом пакете функция binom.test() не позволяет выбирать тип доверительного интервала. ci.method = \"Clopper-Pearson\" возможна, если включить библиотеку mosaic. 6.2 Байесовский доверительный интервал Байесовский доверительный \\((100-k)\\)-% интервал (по-английски credible interval) — это интервал \\([\\frac{k}{2}, 1-\\frac{k}{2}]\\) от апостериорного распределения. low_ci &lt;- binom.test(x = 108+92, n = 108+92+12+28)$conf.int[1] up_ci &lt;- binom.test(x = 108+92, n = 108+92+12+28)$conf.int[2] cred_int_l &lt;- qbeta(0.025, 108+92, 12+28) cred_int_h &lt;- qbeta(0.975, 108+92, 12+28) tibble(x = seq(0, 1, by = 0.001), y = dbeta(x, 108+92, 12+28)) %&gt;% ggplot(aes(x, y))+ geom_line()+ annotate(geom = &quot;errorbar&quot;, y = 0, xmin = low_ci, xmax = up_ci, color = &quot;red&quot;)+ annotate(geom = &quot;errorbar&quot;, y = -1, xmin = cred_int_l, xmax = cred_int_h, color = &quot;lightblue&quot;)+ labs(title = &quot;Апостериорное распределение&quot;, subtitle = &quot;красным фреквентисткий 95% доверительный интервал\\nсиним байесовский 95% доверительный интервал&quot;, x = &quot;&quot;, y = &quot;&quot;) В работе (Coretta 2016) собраны данные длительности исландских гласных. Отфильтруйте данные, произнесенные носителем tt01 (переменная speaker), произведите байесовский апдейт данных, моделируя длительность гласных (переменная vowel.dur) нормальным распределением и постройте график. На графике отобразите 80% и 95% байесовский доверительный интервал (при построении интервала я использовал аргумент width = 0.001). В качестве априорного распределения используйте нормальное распределение со средним 87 и стандартным отклонением 25. "],["коэффициент-байеса.html", "7 Коэффициент Байеса 7.1 Формула Байеса опять 7.2 Категориальные данные 7.3 Интерпретация коэфициента Байеса 7.4 Биномиальные данные", " 7 Коэффициент Байеса 7.1 Формула Байеса опять \\[P(\\theta|Data) = \\frac{P(Data|\\theta) \\times P(\\theta) }{P(Data)}\\] Рассмотрим какой-то простой случай, который мы уже видели много раз. Немного упрощая данные из статьи (Rosenbach 2003: 394), можно сказать что носители британского английского предпочитают s-генитив (90%) of-генитиву (10%). Проведите байесовский апдейт, если Вы наблюдаете в интервью британского актера из 120 контекстов 92 s-генитивов. Априорное распределение берите соразмерное данным. Если мы не будем следовать простой дорожкой, которую мы обсуждали несколько разделов назад, а будем все делать согласно формуле Байеса, то получатся следующие компоненты: априорное распределение tibble(x = seq(0, 1, 0.001), prior = dbeta(x = x, shape1 = 120*0.9, shape2 = 120*0.1)) %&gt;% ggplot(aes(x, prior))+ geom_line(color = &quot;red&quot;) функция правдоподобия tibble(x = seq(0, 1, 0.001), likelihood = dbinom(x = 92, size = 120, prob = x)) %&gt;% ggplot(aes(x, likelihood))+ geom_line() их произведение (пропорционально апостериорному распределению) tibble(x = seq(0, 1, 0.001), prior = dbeta(x = x, shape1 = 120*0.9, shape2 = 120*0.1), likelihood = dbinom(x = 92, size = 120, prob = x), product = prior*likelihood) %&gt;% ggplot(aes(x, product))+ geom_line() предельное правдоподобие, которое позволяет сделать получившееся распределение распределением вероятностей marginal_likelihood &lt;- integrate(function(p){ dbinom(92, 120, p) * dbeta(p, 120*0.9, 120*0.1)}, lower = 0, upper = 1) marginal_likelihood 0.0009531395 with absolute error &lt; 0.000044 … и в результате получается апостериорное распределение! tibble(x = seq(0, 1, 0.001), prior = dbeta(x = x, shape1 = 120*0.9, shape2 = 120*0.1), likelihood = dbinom(x = 92, size = 120, prob = x), product = prior*likelihood, posterior = product/marginal_likelihood[[1]]) %&gt;% ggplot(aes(x, posterior))+ geom_line(color = &quot;darkgreen&quot;)+ geom_line(aes(y = prior), color = &quot;red&quot;) … которое мы умеем доставать и быстрее: tibble(x = seq(0, 1, 0.001), prior = dbeta(x = x, shape1 = 120*0.9, shape2 = 120*0.1), likelihood = dbinom(x = 92, size = 120, prob = x), product = prior*likelihood, posterior = product/marginal_likelihood[[1]], posterior_2 = dbeta(x = x, shape1 = 120*0.9+92, shape2 = 120*0.1+120-92)) %&gt;% ggplot(aes(x, posterior))+ geom_line(color = &quot;darkgreen&quot;, size = 2)+ geom_line(aes(y = prior), color = &quot;red&quot;)+ geom_line(aes(y = posterior_2), linetype = 2, color = &quot;yellow&quot;) Представим себе, что у нас есть \\(k\\) гипотез \\(M\\). Тогда формула Байеса может выглядеть вот так: \\[P(M_k|Data) = \\frac{P(Data|M_k) \\times P(M_k) }{P(Data)}\\] В данном занятии мы рассмотрим только случай двух модели, но можно рассматривать и случаи, когда моделей много. Посмотрим на соотношение апостериорных распределений двух моделей: \\[\\underbrace{\\frac{P(M_1 \\mid Data)}{P(M_2 \\mid Data)}}_{\\text{posterior odds}} = \\frac{\\frac{P(Data|M_1) \\times P(M_1) }{P(Data)}}{\\frac{P(Data|M_2) \\times P(M_2) }{P(Data)}}=\\underbrace{\\frac{P(Data \\mid M_1)}{P(Data \\mid M_2)}}_{\\text{Bayes factor}}\\times\\underbrace{\\frac{P(M_1)}{P(M_2)}}_{\\text{prior odds}}\\] Таким образом байесовский коэффициент это соотношение апосториорных распределений деленное на соотношение априорных распределений. \\[BF_{12}= \\frac{P(M_1 \\mid Data)/P(M_2 \\mid Data)}{P(M_1)/P(M_2)}=\\frac{P(M_1 \\mid Data)\\times P(M_2)}{P(M_2 \\mid Data)\\times P(M_1)}\\] В результате получается, что коэффициент Байеса – это соотношение предельных правдоподобий (знаменатель теоремы Байеса): \\[BF_{12}= \\frac{P(Data|\\theta, M_1))}{P(Data|\\theta, M_2))}=\\frac{\\int P(Data|\\theta, M_1)\\times P(\\theta|M_1)}{\\int P(Data|\\theta, M_2)\\times P(\\theta|M_2)}\\] Важно заметить, что если вероятности априорных моделей равны, то байесовский коэффициент равен просто соотношению функций правдоподобия. Надо отметить, что не все тепло относятся к сравнению моделей байесовским коэффициентом (см. Gelman, Rubin 1994). 7.2 Категориальные данные Для примера обратимся снова к датасету, который содержит спамерские и обычные смс-сообщения, выложенному UCI Machine Learning на kaggle, и при помощи пакета udpipe токенизируем и определим часть речи: sms_pos &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/spam_sms_pos.csv&quot;) glimpse(sms_pos) Rows: 34 Columns: 3 $ type &lt;chr&gt; &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;ham&quot;, &quot;h… $ upos &lt;chr&gt; &quot;ADJ&quot;, &quot;ADP&quot;, &quot;ADV&quot;, &quot;AUX&quot;, &quot;CCONJ&quot;, &quot;DET&quot;, &quot;INTJ&quot;, &quot;NOUN&quot;, &quot;NUM&quot;… $ n &lt;dbl&gt; 4329, 5004, 5832, 5707, 1607, 3493, 1676, 12842, 1293, 2424, 1144… sms_pos %&gt;% group_by(type) %&gt;% mutate(ratio = n/sum(n), upos = fct_reorder(upos, n, mean, .desc = TRUE)) %&gt;% ggplot(aes(type, ratio))+ geom_col()+ geom_label(aes(label = round(ratio, 3)), position = position_stack(vjust = 0.5))+ facet_wrap(~upos, scales = &quot;free_y&quot;) Давайте полученные доли считать нашей моделью: сумма всех чисел внутри каждого типа (ham/spam) дает в сумме 1. Мы получили новое сообщение: Call FREEPHONE 0800 542 0825 now! Модель udpipe разобрала его следующим образом: VERB NUM NUM NUM NUM ADV PUNCT Если мы считаем наши модели равновероятными: first_update &lt;- tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior = 0.5, likelihood = c(0.135, 0.096), product = prior*likelihood, marginal_likelihood = sum(product), posterior = product/marginal_likelihood) first_update Если же мы примем во внимание, что наши классы не равноправны, то сможем посчитать это нашим априорным распределением для моделей. sms_pos %&gt;% uncount() %&gt;% count(type) %&gt;% mutate(ratio = n/sum(n)) -&gt; class_ratio class_ratio second_update &lt;- tibble(model = c(&quot;ham&quot;, &quot;spam&quot;), prior = class_ratio$ratio, likelihood = c(0.135, 0.096), product = prior*likelihood, marginal_likelihood = sum(product), posterior = product/marginal_likelihood) second_update # Bayes factor second_update$marginal_likelihood[1]/first_update$marginal_likelihood[1] [1] 1.098469 7.3 Интерпретация коэфициента Байеса 7.4 Биномиальные данные Рассмотрим простенькую задачу, которую мы видели раньше: Немного упрощая данные из статьи (Rosenbach 2003: 394), можно сказать что носители британского английского предпочитают s-генитив (90%) of-генитиву (10%), а носители американского английского предпочитают s-генитив (85%) of-генитиву (15%). Мы наблюдаем актера, который в интервью из 120 контекстов использует в 92 случаях s-генитивы. Сравните модели при помощи байесовского коэффициента. tibble(x = seq(0, 1, by = 0.001), y = dbeta(x, 120*0.9, 120*0.1), z = dbeta(x, 120*0.85, 120*0.15)) %&gt;% ggplot(aes(x, y))+ geom_line(color = &quot;red&quot;)+ geom_line(aes(y = z), color = &quot;lightblue&quot;)+ geom_vline(xintercept = 92/120, linetype = 2) m1 &lt;- function(p) dbinom(92, 120, p) * dbeta(p, 120*0.9, 120*0.1) m2 &lt;- function(p) dbinom(92, 120, p) * dbeta(p, 120*0.85, 120*0.15) integrate(m1, 0, 1)[[1]]/integrate(m2, 0, 1)[[1]] [1] 0.0672068 В работе (Coretta 2016) собраны данные длительности исландских гласных. Отфильтруйте данные, произнесенные носителем tt01 (переменная speaker), посчитайте байесовский коэффициент (\\(B_{12}\\)) для двух априорных моделей: нормального распределения со средним 87 и стандартным отклонением 25. (\\(m_1\\)) нормального распределения со средним 85 и стандартным отклонением 30. (\\(m_2\\)) Ответ округлите до трёх или менее знаков после запятой. "],["эмпирическая-байесовская-оценка.html", "8 Эмпирическая байесовская оценка", " 8 Эмпирическая байесовская оценка library(tidyverse) Метод эмпирической байесовской оценки (Empirical Bayes estimation) — один из байесовских методов, в рамках которого: производят оценку априорного распределения вероятностей на основании имеющихся данных используют полученное априорное распределение для получение апостериорной оценки для каждого наблюдения Рассмотрим пример данных из статьи (Daniel et al. 2019), в которой аннализировались интервью с людьми из деревени Михалёвская и исследовался ряд консервативных и инновативных черт в их речи. mikhalevskaja &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/ustya_data.csv&quot;) glimpse(mikhalevskaja) Rows: 359 Columns: 7 $ speaker &lt;chr&gt; &quot;avm1922&quot;, &quot;ans1925&quot;, &quot;avt1928&quot;, &quot;egp1928&quot;, &quot;lpp1928&quot;, &quot;p… $ year &lt;dbl&gt; 1922, 1925, 1928, 1928, 1928, 1928, 1930, 1933, 1935, 194… $ gender &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f… $ conservative &lt;dbl&gt; 92, 56, 12, 33, 2, 83, 22, 22, 33, 60, 58, 11, 55, 8, 30,… $ innovative &lt;dbl&gt; 60, 70, 46, 127, 23, 127, 41, 88, 85, 103, 200, 73, 70, 5… $ total &lt;dbl&gt; 152, 126, 58, 160, 25, 210, 63, 110, 118, 163, 258, 84, 1… $ feature &lt;chr&gt; &quot;adj&quot;, &quot;adj&quot;, &quot;adj&quot;, &quot;adj&quot;, &quot;adj&quot;, &quot;adj&quot;, &quot;adj&quot;, &quot;adj&quot;, &quot;… Представим себе, что мы решили задаться целью найти наиболее диалектных носителей: library(tidytext) mikhalevskaja %&gt;% mutate(ratio = conservative/total, speaker = reorder_within(speaker, ratio, feature)) %&gt;% ggplot(aes(ratio, speaker, color = gender))+ geom_point()+ facet_wrap(~feature, scales = &quot;free&quot;)+ scale_y_reordered() Не очень легко это анализировать… Давайте выберем один признак – подъем a: консервативными считались формы [ꞌpʲetʲero], а инновативной – реализация [ꞌpʲatʲərə]. Посчитаем долю и отсортируем: mikhalevskaja %&gt;% filter(feature == &quot;a-e&quot;) %&gt;% mutate(ratio = conservative/total) %&gt;% arrange(desc(ratio)) В целом, всего в интервью встречается от 4 до 244 контекстов для реализации признака. Хотим ли мы верить, что lpp1928 с 29 наблюдениями диалектнее, чем mgb1949 с 104 наблюдениями, только на основании доли? mikhalevskaja %&gt;% filter(feature == &quot;a-e&quot;) %&gt;% mutate(ratio = conservative/total) %&gt;% ggplot(aes(ratio))+ geom_histogram() Мы можем провести байесовский апдейт, но для этого нам нужно априорное распределение. Трюк, который предлагает байесовская эмпирическая оценка заключается в том, что априорное распределение можно попробовать получить на основании данных: library(fitdistrplus) mikhalevskaja %&gt;% filter(feature == &quot;a-e&quot;) %&gt;% mutate(ratio = conservative/total) %&gt;% filter(ratio != 0, # оказывается fitdist плохо работает, когда много крайних точек ratio != 1) -&gt; for_beta_estimation beta_est &lt;- fitdist(for_beta_estimation$ratio, distr = &#39;beta&#39;, method = &#39;mle&#39;) beta_est Fitting of the distribution &#39; beta &#39; by maximum likelihood Parameters: estimate Std. Error shape1 1.590621 0.4127354 shape2 5.445977 1.5766951 Сделаем байесовский апдейт: mikhalevskaja %&gt;% filter(feature == &quot;a-e&quot;) %&gt;% mutate(alpha_prior = beta_est$estimate[1], beta_prior = beta_est$estimate[2], alpha_post = conservative+alpha_prior, beta_post = innovative+beta_prior, mean_post = alpha_post/(alpha_post+beta_post), ratio = conservative/total) %&gt;% ggplot(aes(ratio, mean_post, label = speaker, color = total))+ geom_hline(yintercept = beta_est$estimate[1]/sum(beta_est$estimate), linetype = 2)+ geom_point()+ ggrepel::geom_text_repel() Как видно, байесовская оценка не сильно отличается от старой оценки средним, однако таким образом мы можем видеть, что после байесовского апдейта наблюдения с маленьким количеством наблюдений льнут к среднему априорного распределения. Мы можем даже умножить параметры нашего априорного распределения на 10, чтобы показать это: mikhalevskaja %&gt;% filter(feature == &quot;a-e&quot;) %&gt;% mutate(alpha_prior = beta_est$estimate[1]*10, beta_prior = beta_est$estimate[2]*10, alpha_post = conservative+alpha_prior, beta_post = innovative+beta_prior, mean_post = alpha_post/(alpha_post+beta_post), ratio = conservative/total) %&gt;% ggplot(aes(ratio, mean_post, label = speaker, color = total))+ geom_hline(yintercept = beta_est$estimate[1]/sum(beta_est$estimate), linetype = 2)+ geom_point()+ ggrepel::geom_text_repel() mikhalevskaja %&gt;% filter(feature == &quot;a-e&quot;) %&gt;% mutate(alpha_prior = beta_est$estimate[1]*40, beta_prior = beta_est$estimate[2]*40, alpha_post = conservative+alpha_prior, beta_post = innovative+beta_prior, mean_post = alpha_post/(alpha_post+beta_post), ratio = conservative/total) %&gt;% ggplot(aes(ratio, mean_post, label = speaker, color = total))+ geom_hline(yintercept = beta_est$estimate[1]/sum(beta_est$estimate), linetype = 2)+ geom_point()+ ggrepel::geom_text_repel() Или в формате гифки: В работе (Coretta 2016) собраны данные длительности исландских гласных. Используя алгоритм максимального правдоподобия и идеи эмперической байесовской оценки, найдите априорное распределение для длительности гласных (переменная vowel.dur), используя все наблюдения в датасете и моделируя его нормальным распределением. Дальше проведите байесовский апдейт длительности гласных носителя tt01 (переменная speaker) и нарисуйте 80% доверительный интервал апостериорного распределения. "],["ограничения-на-применение-регрессии.html", "9 Ограничения на применение регрессии 9.1 Введение 9.2 Нелинейность взаимосвязи 9.3 Нормальность распределение остатков 9.4 Гетероскидастичность 9.5 Мультиколлинеарность 9.6 Независимость наблюдений", " 9 Ограничения на применение регрессии Некоторые думают, что линейная регрессия решит все их проблемы (по крайней мере те из них, которые связаны с предсказанием какой-то числовой переменной). Это так. Но нужно быть осторожным — у регрессии есть свои ограничения на применение. 9.1 Введение Ссылка на RMD с обсуждением. 9.1.1 Библиотеки library(tidyverse) 9.1.2 Lexical Decision Task data Dataset and description from Rling package by Natalia Levshina. This data set contains 100 randomly selected words from the English Lexicon Project data (Balota et al. 2007), their lengths, mean reaction times and corpus frequencies. ldt &lt;- read_csv(&quot;https://goo.gl/ToxfU6&quot;) ldt 9.2 Нелинейность взаимосвязи Давайте посмотрим на простой график: ldt %&gt;% ggplot(aes(Mean_RT, Freq))+ geom_point()+ theme_bw() Регрессия на таких данных будет супер неиформативна: ldt %&gt;% ggplot(aes(Mean_RT, Freq))+ geom_point()+ geom_smooth(method = &quot;lm&quot;)+ theme_bw() m1 &lt;- summary(lm(Mean_RT~Freq, data = ldt)) m1 Call: lm(formula = Mean_RT ~ Freq, data = ldt) Residuals: Min 1Q Median 3Q Max -224.93 -85.42 -30.52 81.90 632.66 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 826.998242 15.229783 54.301 &lt; 0.0000000000000002 *** Freq -0.005595 0.001486 -3.765 0.000284 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 143.9 on 98 degrees of freedom Multiple R-squared: 0.1264, Adjusted R-squared: 0.1174 F-statistic: 14.17 on 1 and 98 DF, p-value: 0.0002843 9.2.1 Логарифмирование ldt %&gt;% ggplot(aes(Mean_RT, log(Freq)))+ geom_point()+ geom_smooth(method = &quot;lm&quot;)+ theme_bw() ldt %&gt;% ggplot(aes(Mean_RT, log(Freq+1)))+ geom_point()+ geom_smooth(method = &quot;lm&quot;)+ theme_bw() m2 &lt;- summary(lm(Mean_RT~log(Freq+1), data = ldt)) m2 Call: lm(formula = Mean_RT ~ log(Freq + 1), data = ldt) Residuals: Min 1Q Median 3Q Max -242.36 -76.66 -17.49 48.64 630.49 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1001.60 29.79 33.627 &lt; 0.0000000000000002 *** log(Freq + 1) -34.03 4.76 -7.149 0.000000000158 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 124.8 on 98 degrees of freedom Multiple R-squared: 0.3428, Adjusted R-squared: 0.3361 F-statistic: 51.11 on 1 and 98 DF, p-value: 0.0000000001576 m1$adj.r.squared [1] 0.1174405 m2$adj.r.squared [1] 0.336078 Отлогорифмировать можно и другую переменную. ldt %&gt;% ggplot(aes(log(Mean_RT), log(Freq + 1)))+ geom_point()+ geom_smooth(method = &quot;lm&quot;)+ theme_bw() m3 &lt;- summary(lm(log(Mean_RT)~log(Freq+1), data = ldt)) m1$adj.r.squared [1] 0.1174405 m2$adj.r.squared [1] 0.336078 m3$adj.r.squared [1] 0.3838649 Как интерпретировать полученную регрессию с двумя отлогорифмированными значениями? В обычной линейной регресии мы узнаем отношения между \\(x\\) и \\(y\\): \\[y_i = \\beta_0+\\beta_1\\times x_i\\] Как изменится \\(y_j\\), если мы увеличем \\(x_i + 1 = x_j\\)? \\[y_j = \\beta_0+\\beta_1\\times x_j\\] \\[y_j - y_i = \\beta_0+\\beta_1\\times x_j - (\\beta_0+\\beta_1\\times x_i) = \\beta_1(x_j - x_i)\\] Т. е. \\(y\\) увеличится на \\(\\beta_1\\) , если \\(x\\) увеличится на 1. Что же будет с логарифмированными переменными? Как изменится \\(y_j\\), если мы увеличем \\(x_i + 1 = x_j\\)? \\[\\log(y_j) - \\log(y_i) = \\beta_1\\times (\\log(x_j) - \\log(x_i))\\] \\[\\log\\left(\\frac{y_j}{y_i}\\right) = \\beta_1\\times \\log\\left(\\frac{x_j}{x_i}\\right) = \\log\\left(\\left(\\frac{x_j}{x_i}\\right) ^ {\\beta_1}\\right)\\] \\[\\frac{y_j}{y_i}= \\left(\\frac{x_j}{x_i}\\right) ^ {\\beta_1}\\] Т. е. \\(y\\) увеличится на \\(\\beta_1\\) процентов, если \\(x\\) увеличится на 1 процент. Логарифмирование — не единственный вид траснформации: трансформация Тьюки shiny::runGitHub(&quot;agricolamz/tukey_transform&quot;) трансформация Бокса — Кокса … В датасет собрана частотность разных лемм на основании корпуса НКРЯ (Ляшевская and Шаров 2009) (в датасете только значения больше ipm &gt; 10). Известно, что частотность слова связана с рангом слова (см. закон Ципфа). Постройте переменную ранга и визуализируйте связь ранга и логорифма частотности с разбивкой по частям речи. Какие части речи так и не приобрели после трансформации “приемлимую” линейную форму? (я насчитал 5 таких) aadvadvproanumaproconjintjnumpartprss.PROPsprov 9.3 Нормальность распределение остатков Линейная регрессия предполагает нормальность распределения остатков. Когда связь не линейна, то остатки тоже будут распределены не нормально. Можно смотреть на первый график используя функцию plot(m1) — график остатков. Интерпретаций этого графика достаточно много (см. статью про это). Можно смотреть на qqplot: tibble(res = m1$residuals) %&gt;% ggplot(aes(res))+ geom_histogram(aes(y = ..density..))+ stat_function(fun = dnorm, args = list(mean = 0, sd = sd(m1$residuals)), color = &quot;red&quot;) qqnorm(m1$residuals) qqline(m1$residuals) tibble(res = m2$residuals) %&gt;% ggplot(aes(res))+ geom_histogram(aes(y = ..density..))+ stat_function(fun = dnorm, args = list(mean = 0, sd = sd(m2$residuals)), color = &quot;red&quot;) qqnorm(m2$residuals) qqline(m2$residuals) tibble(res = m3$residuals) %&gt;% ggplot(aes(res))+ geom_histogram(aes(y = ..density..))+ stat_function(fun = dnorm, args = list(mean = 0, sd = sd(m3$residuals)), color = &quot;red&quot;) qqnorm(m3$residuals) qqline(m3$residuals) 9.4 Гетероскидастичность Распределение остатков непостоянно (т.е. не гомоскидастичны): ldt %&gt;% ggplot(aes(Mean_RT, Freq))+ geom_point()+ theme_bw() Тоже решается преобазованием данных. 9.5 Мультиколлинеарность Линейная связь между некоторыми предикторами в модели. корреляционная матрица VIF (Variance inflation factor), car::vif() VIF = 1 (Not correlated) 1 &lt; VIF &lt; 5 (Moderately correlated) VIF &gt;=5 (Highly correlated) 9.6 Независимость наблюдений Наблюдения должны быть независимы. В ином случае нужно использовать модель со смешанными эффектами. 9.6.1 Линейная модель со смешанными эффектами В качестве примера мы попробуем поиграть с законом Хердана-Хипса, описывающий взаимосвязь количества уникальных слов в тексте в зависимости от длины текста. В датасете собрано шесть корпусов Universal Dependencies (Zeman et al. 2020) и некоторые числа, посчитанные на их основании: ud &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/ud_corpora.csv&quot;) ud %&gt;% ggplot(aes(n_words, n_tokens))+ geom_point()+ facet_wrap(~corpus, scale = &quot;free&quot;)+ geom_smooth(method = &quot;lm&quot;, se = FALSE)+ labs(x = &quot;количество слов&quot;, y = &quot;количество уникальных слов&quot;, caption = &quot;данные корпусов Universal Dependencies&quot;) Связь между переменными безусловно линейная, однако в разных корпусах представлена разная перспектива: для каких-то корпусов, видимо, тексты специально нарезались, так что тексты таких корпусов содержат от 30-40 до 50-80 слов, а какие-то оставались не тронутыми. Чтобы показать, что связь есть, нельзя просто “слить” все наблюдения в один котел (см. парадокс Симпсона), так как это нарушит предположение регрессии о независимости наблюдений. Мы не можем включить переменную corpus в качестве dummy-переменной: тогда один из корпусов попадет в интерсепт (станет своего рода базовым уровенем), а остальные будут от него отсчитываться. К тому же не очень понятно, как работать с новыми данными из других корпусов: ведь мы хотим предсказывать значения обобщенно, вне зависимости от корпуса. При моделировании при помощи моделей со случайными эффектами различают: основные эффекты – это те связи, которые нас интересуют, независимые переменные (количество слов, количество уникальных слов); случайные эффекты – это те переменные, которые создают группировку в данных (корпус). В результате моделирования появляется обобщенная модель, которая игнорирует группировку, а потом для каждого значения случайного эффекта генерируется своя регрессия, отсчитывая от обобщенной модели как от базового уровня. Рассмотрим простейший случай: library(lme4) library(lmerTest) fit1 &lt;- lmer(n_tokens~n_words+(1|corpus), data = ud) summary(fit1) Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ lmerModLmerTest] Formula: n_tokens ~ n_words + (1 | corpus) Data: ud REML criterion at convergence: 10321.5 Scaled residuals: Min 1Q Median 3Q Max -7.5271 -0.4947 0.0354 0.5282 8.6350 Random effects: Groups Name Variance Std.Dev. corpus (Intercept) 240.608 15.512 Residual 8.844 2.974 Number of obs: 2046, groups: corpus, 6 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) -4.527634 6.353147 4.958748 -0.713 0.508 n_words 0.827933 0.004418 1992.686553 187.415 &lt;0.0000000000000002 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) n_words -0.079 ud %&gt;% mutate(predicted = predict(fit1)) %&gt;% ggplot(aes(n_words, n_tokens))+ geom_point()+ facet_wrap(~corpus, scale = &quot;free&quot;)+ geom_line(aes(y = predicted), color = &quot;red&quot;) + labs(x = &quot;количество слов&quot;, y = &quot;количество уникальных слов&quot;, caption = &quot;данные корпусов Universal Dependencies&quot;) В данном случае мы предполагаем, что случайный эффект имеет случайный свободный член. Т.е. все получающиеся линии параллельны, так как имеют общий угловой коэффициент. Можно допустить большую свободу и сделать так, чтобы в случайном эффекте были не только интерсепт, но и свободный член: fit2 &lt;- lmer(n_tokens~n_words+(1+n_words|corpus), data = ud) summary(fit2) Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ lmerModLmerTest] Formula: n_tokens ~ n_words + (1 + n_words | corpus) Data: ud REML criterion at convergence: 10275.2 Scaled residuals: Min 1Q Median 3Q Max -7.8337 -0.5003 0.0293 0.5172 8.8405 Random effects: Groups Name Variance Std.Dev. Corr corpus (Intercept) 4.465751 2.11323 n_words 0.009532 0.09763 -1.00 Residual 8.693060 2.94840 Number of obs: 2046, groups: corpus, 6 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 3.23103 0.88937 2.21775 3.633 0.0582 . n_words 0.80323 0.04005 4.10414 20.056 0.0000299 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) n_words -0.988 optimizer (nloptwrap) convergence code: 0 (OK) boundary (singular) fit: see ?isSingular ud %&gt;% mutate(predicted = predict(fit2)) %&gt;% ggplot(aes(n_words, n_tokens))+ geom_point()+ facet_wrap(~corpus, scale = &quot;free&quot;)+ geom_line(aes(y = predicted), color = &quot;red&quot;) + labs(x = &quot;количество слов&quot;, y = &quot;количество уникальных слов&quot;, caption = &quot;данные корпусов Universal Dependencies&quot;) При желании мы можем также построить модель, в которой в случайном эффекте будет лишь угловой коэффициент, а свободный член будет фиксированным: fit3 &lt;- lmer(n_tokens~n_words+(0+n_words|corpus), data = ud) summary(fit3) Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [ lmerModLmerTest] Formula: n_tokens ~ n_words + (0 + n_words | corpus) Data: ud REML criterion at convergence: 10280.9 Scaled residuals: Min 1Q Median 3Q Max -7.8107 -0.4933 0.0315 0.5227 8.8209 Random effects: Groups Name Variance Std.Dev. corpus n_words 0.004023 0.06343 Residual 8.717996 2.95263 Number of obs: 2046, groups: corpus, 6 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 2.64805 0.21627 2043.59791 12.24 &lt; 0.0000000000000002 *** n_words 0.80427 0.02615 5.16230 30.76 0.000000477 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) n_words -0.132 ud %&gt;% mutate(predicted = predict(fit3)) %&gt;% ggplot(aes(n_words, n_tokens))+ geom_point()+ facet_wrap(~corpus, scale = &quot;free&quot;)+ geom_line(aes(y = predicted), color = &quot;red&quot;) + labs(x = &quot;количество слов&quot;, y = &quot;количество уникальных слов&quot;, caption = &quot;данные корпусов Universal Dependencies&quot;) Линии получились очень похожими, но разными: Сравним полученные модели: anova(fit3, fit2, fit1) Визуализируйте полученные модели при помощи функции plot(). Какие ограничения на применение линейной регрессии нарушается в наших моделях? Постройте модель со случайными угловым коэффициентом и свободным членом, устранив проблему, которую вы заметили в прошлом задании. Пользуясь знаниями из предыдущих заданий, смоделируйте связь количества слов и количества существительных. С какими проблемами вы столкнулись? "],["логистическая-порядковая-и-мультиномиальная-регрессия.html", "10 Логистическая, порядковая и мультиномиальная регрессия 10.1 Логистическая регрессия 10.2 Порядковая логистическая регрессия 10.3 Мультиномиальная регрессия", " 10 Логистическая, порядковая и мультиномиальная регрессия library(tidyverse) Логистическая (logit, logistic) и мультиномиальная (multinomial) регрессия применяются в случаях, когда зависимая переменная является категориальной: с двумя значениями (логистическая регрессия) с более чем двумя значениями, упорядоченными в иерархию (порядковая регрессия) с более чем двумя значениями (мультиномиальная регрессия) 10.1 Логистическая регрессия 10.1.1 Теория Мы хотим чего-то такого: \\[\\underbrace{y}_{[-\\infty, +\\infty]}=\\underbrace{\\mbox{β}_0+\\mbox{β}_1\\cdot x_1+\\mbox{β}_2\\cdot x_2 + \\dots +\\mbox{β}_k\\cdot x_k +\\mbox{ε}_i}_{[-\\infty, +\\infty]}\\] Вероятность — отношение количества успехов к общему числу событий: \\[p = \\frac{\\mbox{# успехов}}{\\mbox{# неудач} + \\mbox{# успехов}}, p \\in [0, 1]\\] Шансы — отношение количества успехов к количеству неудач: \\[odds = \\frac{p}{1-p} = \\frac{p\\mbox{(успеха)}}{p\\mbox{(неудачи)}}, odds \\in [0, +\\infty]\\] Натуральный логарифм шансов: \\[\\log(odds) \\in [-\\infty, +\\infty]\\] Но, что нам говорит логарифм шансов? Как нам его интерпретировать? tibble(n = 10, success = 1:9, failure = n - success, prob.1 = success/(success+failure), odds = success/failure, log_odds = log(odds), prob.2 = exp(log_odds)/(1+exp(log_odds))) Как связаны вероятность и логарифм шансов: \\[\\log(odds) = \\log\\left(\\frac{p}{1-p}\\right)\\] \\[p = \\frac{\\exp(\\log(odds))}{1+\\exp(\\log(odds))}\\] Логарифм шансов равен 0.25. Посчитайте вероятность успеха: Как связаны вероятность и логарифм шансов: 10.1.2 Практика В датасет собрано 19 языков, со следующими переменными: language — переменная, содержащая язык tone — бинарная переменная, обозначающая наличие тонов long_vowels — бинарная переменная, обозначающая наличие долгих гласных stress — бинарная переменная, обозначающая наличие ударения ejectives — бинарная переменная, обозначающая наличие абруптивных consonants — переменная, содержащая информацию о количестве согласных vowels — переменная, содержащая информацию о количестве гласных phonological_profiles &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/phonological_profiles.csv&quot;) glimpse(phonological_profiles) Rows: 19 Columns: 8 $ language &lt;chr&gt; &quot;Turkish&quot;, &quot;Korean&quot;, &quot;Tiwi&quot;, &quot;Liberia Kpelle&quot;, &quot;Tulu&quot;, &quot;Ma… $ tone &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE… $ long_vowels &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE,… $ stress &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, F… $ ejectives &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA… $ consonants &lt;dbl&gt; 25, 21, 22, 22, 24, 20, 22, 24, 15, 18, 17, 8, 26, 28, 30,… $ vowels &lt;dbl&gt; 8, 11, 4, 12, 13, 6, 20, 12, 5, 11, 8, 5, 14, 6, 7, 7, 5, … $ area &lt;chr&gt; &quot;Eurasia&quot;, &quot;Eurasia&quot;, &quot;Australia&quot;, &quot;Africa&quot;, &quot;Eurasia&quot;, &quot;S… set.seed(42) phonological_profiles %&gt;% ggplot(aes(ejectives, consonants))+ geom_boxplot(aes(fill = ejectives), show.legend = FALSE, outlier.alpha = 0)+ # по умолчанию боксплот рисует выбросы, outlier.alpha = 0 -- это отключает geom_jitter(size = 3) 10.1.2.1 Почему не линейную регрессию? lm_0 &lt;- lm(as.double(ejectives)~1, data = phonological_profiles) lm_1 &lt;- lm(as.double(ejectives)~consonants, data = phonological_profiles) lm_0 Call: lm(formula = as.double(ejectives) ~ 1, data = phonological_profiles) Coefficients: (Intercept) 0.3158 lm_1 Call: lm(formula = as.double(ejectives) ~ consonants, data = phonological_profiles) Coefficients: (Intercept) consonants -0.5389 0.0353 Первая модель: \\[ejectives = 0.3158 \\times consonants\\] Вторая модель: \\[ejectives = -0.5389 + 0.0353 \\times consonants\\] phonological_profiles %&gt;% ggplot(aes(consonants, as.double(ejectives)))+ geom_point()+ geom_smooth(method = &quot;lm&quot;)+ theme_bw()+ labs(y = &quot;ejectives (yes = 2, no = 1)&quot;) 10.1.2.2 Модель без предиктора logit_0 &lt;- glm(ejectives~1, family = &quot;binomial&quot;, data = phonological_profiles) summary(logit_0) Call: glm(formula = ejectives ~ 1, family = &quot;binomial&quot;, data = phonological_profiles) Deviance Residuals: Min 1Q Median 3Q Max -0.8712 -0.8712 -0.8712 1.5183 1.5183 Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) -0.7732 0.4935 -1.567 0.117 (Dispersion parameter for binomial family taken to be 1) Null deviance: 23.699 on 18 degrees of freedom Residual deviance: 23.699 on 18 degrees of freedom AIC: 25.699 Number of Fisher Scoring iterations: 4 logit_0$coefficients (Intercept) -0.7731899 table(phonological_profiles$ejectives) FALSE TRUE 13 6 log(6/13) # β0 [1] -0.7731899 6/(13+6) # p [1] 0.3157895 exp(log(6/13))/(1+exp(log(6/13))) # p [1] 0.3157895 Какой коэфициент логистической регрессии, мы получим, запустив модель, предсказывающую количество s-генитивов, если наши данные состоят из 620 s-генитивов из 699 генетивных контекстов? Ответ округлите до трех и меньше знаков после запятой. 10.1.2.3 Модель c одним числовым предиктором logit_1 &lt;- glm(ejectives~consonants, family = &quot;binomial&quot;, data = phonological_profiles) summary(logit_1) Call: glm(formula = ejectives ~ consonants, family = &quot;binomial&quot;, data = phonological_profiles) Deviance Residuals: Min 1Q Median 3Q Max -1.08779 -0.49331 -0.20265 0.02254 2.45384 Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) -12.1123 6.1266 -1.977 0.0480 * consonants 0.4576 0.2436 1.878 0.0603 . --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 (Dispersion parameter for binomial family taken to be 1) Null deviance: 23.699 on 18 degrees of freedom Residual deviance: 12.192 on 17 degrees of freedom AIC: 16.192 Number of Fisher Scoring iterations: 6 logit_1$coefficients (Intercept) consonants -12.1123347 0.4576095 phonological_profiles %&gt;% mutate(ejectives = as.double(ejectives)) %&gt;% ggplot(aes(consonants, ejectives)) + geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;binomial&quot;), se = FALSE)+ geom_point() Какова вероятность, что в языке с 29 согласными есть абруптивные? logit_1$coefficients (Intercept) consonants -12.1123347 0.4576095 \\[\\log\\left({\\frac{p}{1-p}}\\right)_i=\\beta_0+\\beta_1\\times consinants_i + \\epsilon_i\\] \\[\\log\\left({\\frac{p}{1-p}}\\right)=-12.1123347 + 0.4576095 \\times 29 = 1.158341\\] \\[p = \\frac{e^{1.158341}}{1+e^{1.158341}} = 0.7610311\\] # log(odds) predict(logit_1, newdata = data.frame(consonants = 29)) 1 1.158341 # p predict(logit_1, newdata = data.frame(consonants = 29), type = &quot;response&quot;) 1 0.7610312 Какой логорифм шансов предсказывает наша модель для языка с 25 согласными (6 знаков после запятой)? Какую вероятность предсказывает наша модель для языка с 25 согласными (6 знаков после запятой)? 10.1.2.4 Модель c одним категориальным предиктором logit_2 &lt;- glm(ejectives~area, family = &quot;binomial&quot;, data = phonological_profiles) summary(logit_2) Call: glm(formula = ejectives ~ area, family = &quot;binomial&quot;, data = phonological_profiles) Deviance Residuals: Min 1Q Median 3Q Max -1.66511 -0.55525 -0.00013 0.75853 1.97277 Coefficients: Estimate Std. Error z value (Intercept) -0.0000000000000001245 0.9999999999999997780 0.000 areaAustralia -18.5660685098658397862 6522.6386791247941800975 -0.003 areaEurasia -1.7917594692280540691 1.4719601443879741787 -1.217 areaNorth America 1.0986122886681095601 1.5275252316519460916 0.719 areaPapunesia -18.5660685098631610401 6522.6386791219219958293 -0.003 areaSouth America -18.5660685098637685542 4612.2020954414929292398 -0.004 Pr(&gt;|z|) (Intercept) 1.000 areaAustralia 0.998 areaEurasia 0.224 areaNorth America 0.472 areaPapunesia 0.998 areaSouth America 0.997 (Dispersion parameter for binomial family taken to be 1) Null deviance: 23.699 on 18 degrees of freedom Residual deviance: 15.785 on 13 degrees of freedom AIC: 27.785 Number of Fisher Scoring iterations: 17 logit_2$coefficients (Intercept) areaAustralia areaEurasia -0.000000000000000124505 -18.566068509865839786244 -1.791759469228054069134 areaNorth America areaPapunesia areaSouth America 1.098612288668109560064 -18.566068509863161040130 -18.566068509863768554169 table(phonological_profiles$ejectives, phonological_profiles$area) Africa Australia Eurasia North America Papunesia South America FALSE 2 1 6 1 1 2 TRUE 2 0 1 3 0 0 log(1/6) # Eurasia [1] -1.791759 log(3/1) # North America [1] 1.098612 10.1.2.5 Множественная регрессия logit_3 &lt;- glm(ejectives~consonants+area, family = &quot;binomial&quot;, data = phonological_profiles) summary(logit_3) Call: glm(formula = ejectives ~ consonants + area, family = &quot;binomial&quot;, data = phonological_profiles) Deviance Residuals: Min 1Q Median 3Q Max -1.54011 -0.18623 -0.00012 0.00023 1.53307 Coefficients: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) -21.1760 15.1089 -1.402 0.161 consonants 0.8137 0.5653 1.439 0.150 areaAustralia -16.2910 10754.0138 -0.002 0.999 areaEurasia -1.2069 3.9399 -0.306 0.759 areaNorth America 4.0966 4.8563 0.844 0.399 areaPapunesia -4.8995 10754.0184 0.000 1.000 areaSouth America -17.1162 7065.6839 -0.002 0.998 (Dispersion parameter for binomial family taken to be 1) Null deviance: 23.6989 on 18 degrees of freedom Residual deviance: 6.7901 on 12 degrees of freedom AIC: 20.79 Number of Fisher Scoring iterations: 18 10.1.2.6 Cравнение моделей AIC(logit_0, logit_1, logit_2, logit_3) BIC(logit_0, logit_1, logit_2, logit_3) Выберите наилучшую модель согласно AIC и BIC: logit_0 logit_1 logit_2 logit_3 Для того, чтобы интерпретировать коэффициенты нужно проделать трансформацию: (exp(logit_1$coefficients)-1)*100 (Intercept) consonants -99.99945 58.02918 Перед нами процентное изменние шансов при увеличении независимой переменной на 1. Было предложено много аналогов R\\(^2\\), например, McFadden’s R squared: pscl::pR2(logit_1) fitting null model for pseudo-r2 llh llhNull G2 McFadden r2ML r2CU -6.0958355 -11.8494421 11.5072132 0.4855593 0.4542765 0.6373812 Проанализируйте в датасете с языками связь количества сегментов и наличия ударения. Постройте регрессию, визуализируйте связь. Какой вывод вы можете сделать? 10.2 Порядковая логистическая регрессия Данные взяты из исследования [Endresen, Janda 2015], посвященное исследованию маргинальных глаголов изменения состояния в русском языке. Испытуемые (70 школьников, 51 взрослый) оценивали по шкале Ликерта (1…5) приемлемость глаголов с приставками о- и у-: широко используемуе в СРЛЯ (освежить, уточнить) встретившие всего несколько раз в корпусе (оржавить, увкуснить) искусственные слова (ономить, укампить) marginal_verbs &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/marginal_verbs.csv&quot;) head(marginal_verbs) Переменные в датасете: Gender Age AgeGroup — взрослые или школьники Education City SubjectCode — код испытуемого Score — оценка, поставленная испытуемым (A — самая высокая, E — самая низкая) GivenScore — оценка, поставленная испытуемым (5 — самая высокая, 1 — самая низкая) Stimulus Prefix WordType — тип слова: частотное, редкое, искусственное CorpusFrequency — частотность в корпусе marginal_verbs$Score &lt;- factor(marginal_verbs$Score) levels(marginal_verbs$Score) [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; ordinal &lt;- MASS::polr(Score~Prefix+WordType+CorpusFrequency, data = marginal_verbs) summary(ordinal) Call: MASS::polr(formula = Score ~ Prefix + WordType + CorpusFrequency, data = marginal_verbs) Coefficients: Value Std. Error t value Prefixu 0.136619 0.05286365 2.584 WordTypenonce 1.340603 0.05692826 23.549 WordTypestandard -4.655327 0.12510542 -37.211 CorpusFrequency -0.001015 0.00007879 -12.876 Intercepts: Value Std. Error t value A|B -2.6275 0.0753 -34.8784 B|C -1.4531 0.0552 -26.3246 C|D -0.2340 0.0479 -4.8853 D|E 0.7324 0.0492 14.8986 Residual Deviance: 13138.47 AIC: 13154.47 ordinal$coefficients Prefixu WordTypenonce WordTypestandard CorpusFrequency 0.136619412 1.340602696 -4.655327418 -0.001014583 Как и раньше, можно преобразовать коэффициенты: (exp(ordinal$coefficients)-1)*100 Prefixu WordTypenonce WordTypestandard CorpusFrequency 14.6391763 282.1345921 -99.0489201 -0.1014068 \\[\\log(\\frac{p(A)}{p(B|C|D|E)}) = -2.6275 + 0.136619412 \\times Prefixu +\\] \\[+ 1.340602696 \\times WordTypenonce -\\] \\[-4.655327418 \\times WordTypestandard - \\] \\[ - 0.001014583\\times CorpusFrequency\\] \\[\\log(\\frac{p(A|B)}{p(C|D|E)}) = -1.4531 + 0.136619412 \\times Prefixu + \\] \\[ + 1.340602696 \\times WordTypenonce-\\] \\[-4.655327418 \\times WordTypestandard -\\] \\[ -0.001014583\\times CorpusFrequency\\] \\[\\log(\\frac{p(A|B|C)}{p(D|E)}) = -0.2340 + 0.136619412 \\times Prefixu + \\] \\[ + 1.340602696 \\times WordTypenonce-\\] \\[-4.655327418 \\times WordTypestandard - \\] \\[-0.001014583\\times CorpusFrequency\\] \\[\\log(\\frac{p(A|B|C|D)}{p(E)}) = 0.7324 + 0.136619412 \\times Prefixu +\\] \\[ + 1.340602696 \\times WordTypenonce-\\] \\[-4.655327418 \\times WordTypestandard -\\] \\[=0.001014583\\times CorpusFrequency\\] head(predict(ordinal)) [1] A A E E A A Levels: A B C D E head(predict(ordinal, type = &quot;probs&quot;)) A B C D E 1 0.99178000 0.005665533 0.001798242 0.0004683707 0.0002878525 2 0.93841926 0.041706786 0.013917668 0.0036817261 0.0022745617 3 0.06764594 0.122509282 0.252611927 0.2334448870 0.3237879649 4 0.01855865 0.039108932 0.113894002 0.1808984667 0.6475399508 5 0.90986002 0.060436871 0.020738032 0.0055351143 0.0034299624 6 0.91496678 0.057117954 0.019500629 0.0051963745 0.0032182669 marginal_verbs %&gt;% bind_cols(as_tibble(predict(ordinal, type = &quot;probs&quot;))) %&gt;% gather(score, predictions, A:E) %&gt;% ggplot(aes(x = score, y = predictions, fill = score)) + geom_col(position = &quot;dodge&quot;)+ facet_grid(Prefix~WordType) library(ggeffects) ordinal %&gt;% ggpredict(terms = c(&quot;Prefix&quot;, &quot;WordType&quot;)) %&gt;% plot() 10.3 Мультиномиальная регрессия В этом датасете представлены три нанайских гласных i, ɪ и e, произнесенные нанайским носителем мужского пола из селения Джуен. Каждая строчка — отдельное произнесение. Переменные: f1 — первая форманта f2 — вторая форманта nanai &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2021_da4l/master/data/nanai_vowels.csv&quot;) nanai %&gt;% ggplot(aes(f2, f1, label = sound, color = sound))+ geom_text()+ geom_rug()+ scale_y_reverse()+ scale_x_reverse()+ stat_ellipse()+ theme_bw()+ theme(legend.position = &quot;none&quot;)+ labs(title = &quot;Нанайские гласные в произнесении мужчины из селения Джуен&quot;) mult &lt;- nnet::multinom(sound~f1+f2, data = nanai) # weights: 12 (6 variable) initial value 462.515774 iter 10 value 51.522626 iter 20 value 46.817442 iter 30 value 44.829080 iter 40 value 44.807654 iter 40 value 44.807654 final value 44.807654 converged mult Call: nnet::multinom(formula = sound ~ f1 + f2, data = nanai) Coefficients: (Intercept) f1 f2 i -22.85202 -0.04263175 0.02315226 ɪ -41.46147 0.02360077 0.01937067 Residual Deviance: 89.61531 AIC: 101.6153 \\[\\log(\\frac{p(e)}{p(ɪ)}) = -41.46147 + 0.02360077\\times f1 +0.01937067\\times f2\\] \\[\\log(\\frac{p(i)}{p(ɪ)}) = -22.85202 -0.04263175\\times f1 + 0.02315226\\times f2\\] nanai %&gt;% mutate(prediction = predict(mult), correctness = sound == prediction) %&gt;% ggplot(aes(f1, f2, label = sound, color = correctness))+ geom_text(aes(size = !correctness), show.legend = FALSE)+ scale_y_reverse()+ scale_x_reverse()+ theme_bw()+ labs(title = &quot;Нанайские гласные в произнесении мужчины из селения Джуен&quot;, subtitle = &quot;мультиномиальная регрессия&quot;) "],["ссылки-на-литературу.html", "Ссылки на литературу", " Ссылки на литературу Coretta, Stefano. 2016. “Vowel Duration and Aspiration Effects in Icelandic.” University of York. Daniel, Michael, Ruprecht von Waldenfels, Aleksandra Ter-Avanesova, Polina Kazakova, Ilya Schurov, Ekaterina Gerasimenko, Daria Ignatenko, et al. 2019. “Dialect Loss in the Russian North: Modeling Change Across Variables.” Language Variation and Change 31 (3): 353–76. https://doi.org/10.1017/S0954394519000243. Efron, Bradley, and Trevor Hastie. 2016. Computer Age Statistical Inference. Vol. 5. Cambridge University Press. Hillenbrand, James, Laura A Getty, Michael J Clark, and Kimberlee Wheeler. 1995. “Acoustic Characteristics of American English Vowels.” The Journal of the Acoustical Society of America 97 (5): 3099–3111. Moran, Steven, Daniel McCloy, and Richard Wright, eds. 2014. PHOIBLE Online. Leipzig: Max Planck Institute for Evolutionary Anthropology. https://phoible.org/. Robinson, D. 2017. Introduction to Empirical Bayes: Examples from Baseball Statistics. ASIN: B06WP26J8Q. Rosenbach, Anette. 2003. “Aspects of Iconicity and Economy in the Choice Between the s-Genitive and the of-Genitive in English.” In Determinants of Grammatical Variation in English, edited by Günter Rohdenburg and Britta Mondorf. Berlin, New York: Mouton de Gruyter. Zeman, D., J. Nivre, Mitchell Abrams, Elia Ackermann, Noëmi Aepli, Hamid Aghaei, Željko Agić, et al. 2020. “Universal Dependencies 2.7.” http://hdl.handle.net/11234/1-3424. Ляшевская, О. Н., and С. А. Шаров. 2009. Частотный словарь современного русского языка: На материалах Национального корпуса русского языка. Азбуковник. "]]
